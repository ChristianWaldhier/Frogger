import random
import pygame
import sys

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

LIFESPAN = 300

population_count = 20
count = 0


# TO-DO: create surface to be able to set alpha, see smart boxes


class Frog(object):
    
    def __init__(self, x, y, size):
        frogs.append(self)
        self.x = x
        self.y = y
        self.rect = pygame.Rect(self.x, self.y, size, size)
        self.color = pygame.Color("darkgreen")
        self.vy = 0
        self.fitness = 0
        self.alive = True
        self.dna = DNA()
        
    def calculate_fitness(self):
        self.fitness =  self.y / SCREEN_HEIGHT
        
    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)
        self.calculate_fitness()



    def move(self, vy):
        self.vy = self.dna.genes[count]
        self.y += vy
        self.rect.y += self.vy
        print(self.fitness)

        for car in cars:
            if self.rect.colliderect(car.rect):
                self.color = pygame.Color("red")
                self.vy = 0
                self.alive = False
                
        for wall in walls:
            if self.rect.colliderect(wall.rect):
                self.color = pygame.Color("red")
                self.vy = 0
                self.alive = False
                
class DNA():
    def __init__(self):
        self.genes = []
        for i in range(LIFESPAN):
            self.genes.append(random.randint(-20, 20))

        print(self.genes)
        
class Car():
    def __init__(self, x, y):
        cars.append(self)
        self.x = x
        self.y = y
        self.rect = pygame.Rect(x, y, 32, 32)
        self.vx = random.randrange(1, 3)
        self.color = pygame.Color("blue")
        self.alive = True
               
    def move(self):
        self.rect = pygame.Rect(self.x + self.vx, self.y, 32, 32)
        self.x += self.vx

        # if self.rect.colliderect(frog.rect):
        #     self.vx = 0
        #     self.color = pygame.Color("red")
        
    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)
        
class Wall():
    def __init__(self, x, y, width, height):
        walls.append(self)
        self.x = x
        self.y = y
        self.rect = pygame.Rect(x, y, width, height)
        self.color = pygame.Color("white")
        
    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)


pygame.init()

pygame.display.set_caption("Get to the green square!")
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

clock = pygame.time.Clock()
cars = []
walls = []

frogs = []

Wall(0, 0, SCREEN_WIDTH, 10)
Wall(0, SCREEN_HEIGHT - 10, SCREEN_WIDTH, 10)

end_rect = pygame.Rect(10, 10, SCREEN_WIDTH, 32)

while len(cars) < 10:
    Car(0, random.randrange(0, SCREEN_HEIGHT))
    
while len(frogs) < 20:
    Frog(random.randrange(20, SCREEN_WIDTH), SCREEN_HEIGHT - 50, 16)

def draw_screen(screen, frogs, cars):

    screen.fill((0, 0, 0))
    
    for frog in frogs:
        if frog.alive:
            frog.move(random.randrange(-3, -1))
        frog.draw()
        if frog.rect.colliderect(end_rect):
            print("You Win!")
    
    for car in cars:
        car.move()
        car.draw()
    pygame.draw.rect(screen, pygame.Color("lightblue"), end_rect)
    
    for wall in walls:
        wall.draw()

    
while True:
    clock.tick(60)
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
     
    draw_screen(screen, frogs, cars)
    pygame.display.flip()
    
    count += 1
    
    if count == LIFESPAN - 1:
        count = 0
